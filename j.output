Terminals unused in grammar

   COMMA
   LPARENTHESIS
   RPARENTHESIS
   LBRACKET
   RBRACKET
   LCURLYBRACE
   RCURLYBRACE
   EQUAL
   NOTEQUAL
   LESSTHAN
   LESSTHANEQUAL
   GREATERTHAN
   GREATERTHANEQUAL
   VOID
   IF
   ELSE
   WHILE
   BREAK
   CONTINUE
   FUNCTION
   RETURN
   TYPE


State 19 conflicts: 7 shift/reduce


Grammar

    0 $accept: program $end

    1 program: %empty
    2        | statements

    3 statements: statement
    4           | statements statement

    5 statement: SEMICOLON
    6          | exp SEMICOLON
    7          | var_declaration
    8          | IDENTIFIER ASSIGN exp

    9 exp: literal_exp
   10    | arithmatic_exp
   11    | logical_exp

   12 literal_exp: INT_LITERAL
   13            | FLOAT_LITERAL
   14            | STRING_LITERAL
   15            | BOOL_LITERAL
   16            | NULL_LITERAL

   17 arithmatic_exp: exp PLUS exp
   18               | exp MINUS exp
   19               | exp MULTIPLY exp
   20               | exp DIVIDE exp
   21               | exp MODULUS exp

   22 logical_exp: exp AND exp
   23            | exp OR exp
   24            | NOT exp

   25 var_declaration: VARDECL IDENTIFIER COLON INT
   26                | VARDECL IDENTIFIER COLON FLOAT
   27                | VARDECL IDENTIFIER COLON STRING
   28                | VARDECL IDENTIFIER COLON BOOL
   29                | VARDECL IDENTIFIER COLON ARRAY


Terminals, with rules where they appear

$end (0) 0
error (256)
IDENTIFIER (258) 8 25 26 27 28 29
STRING_LITERAL (259) 14
INT_LITERAL (260) 12
FLOAT_LITERAL (261) 13
BOOL_LITERAL (262) 15
NULL_LITERAL (263) 16
COMMA (264)
COLON (265) 25 26 27 28 29
SEMICOLON (266) 5 6
LPARENTHESIS (267)
RPARENTHESIS (268)
LBRACKET (269)
RBRACKET (270)
LCURLYBRACE (271)
RCURLYBRACE (272)
PLUS (273) 17
MINUS (274) 18
MULTIPLY (275) 19
DIVIDE (276) 20
MODULUS (277) 21
ASSIGN (278) 8
AND (279) 22
OR (280) 23
NOT (281) 24
EQUAL (282)
NOTEQUAL (283)
LESSTHAN (284)
LESSTHANEQUAL (285)
GREATERTHAN (286)
GREATERTHANEQUAL (287)
VOID (288)
VARDECL (289) 25 26 27 28 29
INT (290) 25
STRING (291) 27
FLOAT (292) 26
BOOL (293) 28
ARRAY (294) 29
IF (295)
ELSE (296)
WHILE (297)
BREAK (298)
CONTINUE (299)
FUNCTION (300)
RETURN (301)
TYPE (302)


Nonterminals, with rules where they appear

$accept (48)
    on left: 0
program (49)
    on left: 1 2, on right: 0
statements (50)
    on left: 3 4, on right: 2 4
statement (51)
    on left: 5 6 7 8, on right: 3 4
exp (52)
    on left: 9 10 11, on right: 6 8 17 18 19 20 21 22 23 24
literal_exp (53)
    on left: 12 13 14 15 16, on right: 9
arithmatic_exp (54)
    on left: 17 18 19 20 21, on right: 10
logical_exp (55)
    on left: 22 23 24, on right: 11
var_declaration (56)
    on left: 25 26 27 28 29, on right: 7


State 0

    0 $accept: . program $end

    IDENTIFIER      shift, and go to state 1
    STRING_LITERAL  shift, and go to state 2
    INT_LITERAL     shift, and go to state 3
    FLOAT_LITERAL   shift, and go to state 4
    BOOL_LITERAL    shift, and go to state 5
    NULL_LITERAL    shift, and go to state 6
    SEMICOLON       shift, and go to state 7
    NOT             shift, and go to state 8
    VARDECL         shift, and go to state 9

    $default  reduce using rule 1 (program)

    program          go to state 10
    statements       go to state 11
    statement        go to state 12
    exp              go to state 13
    literal_exp      go to state 14
    arithmatic_exp   go to state 15
    logical_exp      go to state 16
    var_declaration  go to state 17


State 1

    8 statement: IDENTIFIER . ASSIGN exp

    ASSIGN  shift, and go to state 18


State 2

   14 literal_exp: STRING_LITERAL .

    $default  reduce using rule 14 (literal_exp)


State 3

   12 literal_exp: INT_LITERAL .

    $default  reduce using rule 12 (literal_exp)


State 4

   13 literal_exp: FLOAT_LITERAL .

    $default  reduce using rule 13 (literal_exp)


State 5

   15 literal_exp: BOOL_LITERAL .

    $default  reduce using rule 15 (literal_exp)


State 6

   16 literal_exp: NULL_LITERAL .

    $default  reduce using rule 16 (literal_exp)


State 7

    5 statement: SEMICOLON .

    $default  reduce using rule 5 (statement)


State 8

   24 logical_exp: NOT . exp

    STRING_LITERAL  shift, and go to state 2
    INT_LITERAL     shift, and go to state 3
    FLOAT_LITERAL   shift, and go to state 4
    BOOL_LITERAL    shift, and go to state 5
    NULL_LITERAL    shift, and go to state 6
    NOT             shift, and go to state 8

    exp             go to state 19
    literal_exp     go to state 14
    arithmatic_exp  go to state 15
    logical_exp     go to state 16


State 9

   25 var_declaration: VARDECL . IDENTIFIER COLON INT
   26                | VARDECL . IDENTIFIER COLON FLOAT
   27                | VARDECL . IDENTIFIER COLON STRING
   28                | VARDECL . IDENTIFIER COLON BOOL
   29                | VARDECL . IDENTIFIER COLON ARRAY

    IDENTIFIER  shift, and go to state 20


State 10

    0 $accept: program . $end

    $end  shift, and go to state 21


State 11

    2 program: statements .
    4 statements: statements . statement

    IDENTIFIER      shift, and go to state 1
    STRING_LITERAL  shift, and go to state 2
    INT_LITERAL     shift, and go to state 3
    FLOAT_LITERAL   shift, and go to state 4
    BOOL_LITERAL    shift, and go to state 5
    NULL_LITERAL    shift, and go to state 6
    SEMICOLON       shift, and go to state 7
    NOT             shift, and go to state 8
    VARDECL         shift, and go to state 9

    $default  reduce using rule 2 (program)

    statement        go to state 22
    exp              go to state 13
    literal_exp      go to state 14
    arithmatic_exp   go to state 15
    logical_exp      go to state 16
    var_declaration  go to state 17


State 12

    3 statements: statement .

    $default  reduce using rule 3 (statements)


State 13

    6 statement: exp . SEMICOLON
   17 arithmatic_exp: exp . PLUS exp
   18               | exp . MINUS exp
   19               | exp . MULTIPLY exp
   20               | exp . DIVIDE exp
   21               | exp . MODULUS exp
   22 logical_exp: exp . AND exp
   23            | exp . OR exp

    SEMICOLON  shift, and go to state 23
    PLUS       shift, and go to state 24
    MINUS      shift, and go to state 25
    MULTIPLY   shift, and go to state 26
    DIVIDE     shift, and go to state 27
    MODULUS    shift, and go to state 28
    AND        shift, and go to state 29
    OR         shift, and go to state 30


State 14

    9 exp: literal_exp .

    $default  reduce using rule 9 (exp)


State 15

   10 exp: arithmatic_exp .

    $default  reduce using rule 10 (exp)


State 16

   11 exp: logical_exp .

    $default  reduce using rule 11 (exp)


State 17

    7 statement: var_declaration .

    $default  reduce using rule 7 (statement)


State 18

    8 statement: IDENTIFIER ASSIGN . exp

    STRING_LITERAL  shift, and go to state 2
    INT_LITERAL     shift, and go to state 3
    FLOAT_LITERAL   shift, and go to state 4
    BOOL_LITERAL    shift, and go to state 5
    NULL_LITERAL    shift, and go to state 6
    NOT             shift, and go to state 8

    exp             go to state 31
    literal_exp     go to state 14
    arithmatic_exp  go to state 15
    logical_exp     go to state 16


State 19

   17 arithmatic_exp: exp . PLUS exp
   18               | exp . MINUS exp
   19               | exp . MULTIPLY exp
   20               | exp . DIVIDE exp
   21               | exp . MODULUS exp
   22 logical_exp: exp . AND exp
   23            | exp . OR exp
   24            | NOT exp .

    PLUS      shift, and go to state 24
    MINUS     shift, and go to state 25
    MULTIPLY  shift, and go to state 26
    DIVIDE    shift, and go to state 27
    MODULUS   shift, and go to state 28
    AND       shift, and go to state 29
    OR        shift, and go to state 30

    PLUS      [reduce using rule 24 (logical_exp)]
    MINUS     [reduce using rule 24 (logical_exp)]
    MULTIPLY  [reduce using rule 24 (logical_exp)]
    DIVIDE    [reduce using rule 24 (logical_exp)]
    MODULUS   [reduce using rule 24 (logical_exp)]
    AND       [reduce using rule 24 (logical_exp)]
    OR        [reduce using rule 24 (logical_exp)]
    $default  reduce using rule 24 (logical_exp)


State 20

   25 var_declaration: VARDECL IDENTIFIER . COLON INT
   26                | VARDECL IDENTIFIER . COLON FLOAT
   27                | VARDECL IDENTIFIER . COLON STRING
   28                | VARDECL IDENTIFIER . COLON BOOL
   29                | VARDECL IDENTIFIER . COLON ARRAY

    COLON  shift, and go to state 32


State 21

    0 $accept: program $end .

    $default  accept


State 22

    4 statements: statements statement .

    $default  reduce using rule 4 (statements)


State 23

    6 statement: exp SEMICOLON .

    $default  reduce using rule 6 (statement)


State 24

   17 arithmatic_exp: exp PLUS . exp

    STRING_LITERAL  shift, and go to state 2
    INT_LITERAL     shift, and go to state 3
    FLOAT_LITERAL   shift, and go to state 4
    BOOL_LITERAL    shift, and go to state 5
    NULL_LITERAL    shift, and go to state 6
    NOT             shift, and go to state 8

    exp             go to state 33
    literal_exp     go to state 14
    arithmatic_exp  go to state 15
    logical_exp     go to state 16


State 25

   18 arithmatic_exp: exp MINUS . exp

    STRING_LITERAL  shift, and go to state 2
    INT_LITERAL     shift, and go to state 3
    FLOAT_LITERAL   shift, and go to state 4
    BOOL_LITERAL    shift, and go to state 5
    NULL_LITERAL    shift, and go to state 6
    NOT             shift, and go to state 8

    exp             go to state 34
    literal_exp     go to state 14
    arithmatic_exp  go to state 15
    logical_exp     go to state 16


State 26

   19 arithmatic_exp: exp MULTIPLY . exp

    STRING_LITERAL  shift, and go to state 2
    INT_LITERAL     shift, and go to state 3
    FLOAT_LITERAL   shift, and go to state 4
    BOOL_LITERAL    shift, and go to state 5
    NULL_LITERAL    shift, and go to state 6
    NOT             shift, and go to state 8

    exp             go to state 35
    literal_exp     go to state 14
    arithmatic_exp  go to state 15
    logical_exp     go to state 16


State 27

   20 arithmatic_exp: exp DIVIDE . exp

    STRING_LITERAL  shift, and go to state 2
    INT_LITERAL     shift, and go to state 3
    FLOAT_LITERAL   shift, and go to state 4
    BOOL_LITERAL    shift, and go to state 5
    NULL_LITERAL    shift, and go to state 6
    NOT             shift, and go to state 8

    exp             go to state 36
    literal_exp     go to state 14
    arithmatic_exp  go to state 15
    logical_exp     go to state 16


State 28

   21 arithmatic_exp: exp MODULUS . exp

    STRING_LITERAL  shift, and go to state 2
    INT_LITERAL     shift, and go to state 3
    FLOAT_LITERAL   shift, and go to state 4
    BOOL_LITERAL    shift, and go to state 5
    NULL_LITERAL    shift, and go to state 6
    NOT             shift, and go to state 8

    exp             go to state 37
    literal_exp     go to state 14
    arithmatic_exp  go to state 15
    logical_exp     go to state 16


State 29

   22 logical_exp: exp AND . exp

    STRING_LITERAL  shift, and go to state 2
    INT_LITERAL     shift, and go to state 3
    FLOAT_LITERAL   shift, and go to state 4
    BOOL_LITERAL    shift, and go to state 5
    NULL_LITERAL    shift, and go to state 6
    NOT             shift, and go to state 8

    exp             go to state 38
    literal_exp     go to state 14
    arithmatic_exp  go to state 15
    logical_exp     go to state 16


State 30

   23 logical_exp: exp OR . exp

    STRING_LITERAL  shift, and go to state 2
    INT_LITERAL     shift, and go to state 3
    FLOAT_LITERAL   shift, and go to state 4
    BOOL_LITERAL    shift, and go to state 5
    NULL_LITERAL    shift, and go to state 6
    NOT             shift, and go to state 8

    exp             go to state 39
    literal_exp     go to state 14
    arithmatic_exp  go to state 15
    logical_exp     go to state 16


State 31

    8 statement: IDENTIFIER ASSIGN exp .
   17 arithmatic_exp: exp . PLUS exp
   18               | exp . MINUS exp
   19               | exp . MULTIPLY exp
   20               | exp . DIVIDE exp
   21               | exp . MODULUS exp
   22 logical_exp: exp . AND exp
   23            | exp . OR exp

    PLUS      shift, and go to state 24
    MINUS     shift, and go to state 25
    MULTIPLY  shift, and go to state 26
    DIVIDE    shift, and go to state 27
    MODULUS   shift, and go to state 28
    AND       shift, and go to state 29
    OR        shift, and go to state 30

    $default  reduce using rule 8 (statement)


State 32

   25 var_declaration: VARDECL IDENTIFIER COLON . INT
   26                | VARDECL IDENTIFIER COLON . FLOAT
   27                | VARDECL IDENTIFIER COLON . STRING
   28                | VARDECL IDENTIFIER COLON . BOOL
   29                | VARDECL IDENTIFIER COLON . ARRAY

    INT     shift, and go to state 40
    STRING  shift, and go to state 41
    FLOAT   shift, and go to state 42
    BOOL    shift, and go to state 43
    ARRAY   shift, and go to state 44


State 33

   17 arithmatic_exp: exp . PLUS exp
   17               | exp PLUS exp .
   18               | exp . MINUS exp
   19               | exp . MULTIPLY exp
   20               | exp . DIVIDE exp
   21               | exp . MODULUS exp
   22 logical_exp: exp . AND exp
   23            | exp . OR exp

    MULTIPLY  shift, and go to state 26
    DIVIDE    shift, and go to state 27
    MODULUS   shift, and go to state 28

    $default  reduce using rule 17 (arithmatic_exp)


State 34

   17 arithmatic_exp: exp . PLUS exp
   18               | exp . MINUS exp
   18               | exp MINUS exp .
   19               | exp . MULTIPLY exp
   20               | exp . DIVIDE exp
   21               | exp . MODULUS exp
   22 logical_exp: exp . AND exp
   23            | exp . OR exp

    MULTIPLY  shift, and go to state 26
    DIVIDE    shift, and go to state 27
    MODULUS   shift, and go to state 28

    $default  reduce using rule 18 (arithmatic_exp)


State 35

   17 arithmatic_exp: exp . PLUS exp
   18               | exp . MINUS exp
   19               | exp . MULTIPLY exp
   19               | exp MULTIPLY exp .
   20               | exp . DIVIDE exp
   21               | exp . MODULUS exp
   22 logical_exp: exp . AND exp
   23            | exp . OR exp

    $default  reduce using rule 19 (arithmatic_exp)


State 36

   17 arithmatic_exp: exp . PLUS exp
   18               | exp . MINUS exp
   19               | exp . MULTIPLY exp
   20               | exp . DIVIDE exp
   20               | exp DIVIDE exp .
   21               | exp . MODULUS exp
   22 logical_exp: exp . AND exp
   23            | exp . OR exp

    $default  reduce using rule 20 (arithmatic_exp)


State 37

   17 arithmatic_exp: exp . PLUS exp
   18               | exp . MINUS exp
   19               | exp . MULTIPLY exp
   20               | exp . DIVIDE exp
   21               | exp . MODULUS exp
   21               | exp MODULUS exp .
   22 logical_exp: exp . AND exp
   23            | exp . OR exp

    $default  reduce using rule 21 (arithmatic_exp)


State 38

   17 arithmatic_exp: exp . PLUS exp
   18               | exp . MINUS exp
   19               | exp . MULTIPLY exp
   20               | exp . DIVIDE exp
   21               | exp . MODULUS exp
   22 logical_exp: exp . AND exp
   22            | exp AND exp .
   23            | exp . OR exp

    PLUS      shift, and go to state 24
    MINUS     shift, and go to state 25
    MULTIPLY  shift, and go to state 26
    DIVIDE    shift, and go to state 27
    MODULUS   shift, and go to state 28

    $default  reduce using rule 22 (logical_exp)


State 39

   17 arithmatic_exp: exp . PLUS exp
   18               | exp . MINUS exp
   19               | exp . MULTIPLY exp
   20               | exp . DIVIDE exp
   21               | exp . MODULUS exp
   22 logical_exp: exp . AND exp
   23            | exp . OR exp
   23            | exp OR exp .

    PLUS      shift, and go to state 24
    MINUS     shift, and go to state 25
    MULTIPLY  shift, and go to state 26
    DIVIDE    shift, and go to state 27
    MODULUS   shift, and go to state 28

    $default  reduce using rule 23 (logical_exp)


State 40

   25 var_declaration: VARDECL IDENTIFIER COLON INT .

    $default  reduce using rule 25 (var_declaration)


State 41

   27 var_declaration: VARDECL IDENTIFIER COLON STRING .

    $default  reduce using rule 27 (var_declaration)


State 42

   26 var_declaration: VARDECL IDENTIFIER COLON FLOAT .

    $default  reduce using rule 26 (var_declaration)


State 43

   28 var_declaration: VARDECL IDENTIFIER COLON BOOL .

    $default  reduce using rule 28 (var_declaration)


State 44

   29 var_declaration: VARDECL IDENTIFIER COLON ARRAY .

    $default  reduce using rule 29 (var_declaration)
